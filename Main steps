#This code illustrates an example of the use of the FOWCUS database

#read FOWCUS database
##Excel database - available on FigShare, currently under review

#read food production datasets
##FAOSTAT database - is available at https://www.fao.org/faostat/en/#data/QCL

## Start by merging all datasets of the FOWCUS database into a single dataframe
# Initialize an empty list to collect DataFrames
dataframes: list[pd.DataFrame] = []

# Loop through each sheet, read data into a DataFrame, and add it to the list
for tab in tab_list:
    worksheet = unavoidable_foodwaste_db.worksheet(tab)
    data = worksheet.get_all_values()
    df = pd.DataFrame(data)
    df.columns = df.iloc[0]  # Set the first row as header
    df = df[1:]  # Remove the header row to avoid duplication
    df = df[['group', 'item_code', 'item', 'part', 'share_%', 'accounted_in_fao', 'avoidability']]
    df = df.reset_index(drop=True)  # Add this line

    dataframes.append(df)

# Concatenate all DataFrames from the list into one DataFrame
all_data = pd.concat(dataframes, ignore_index=True)

# Set correct column names (assuming they are uniform across all sheets)
all_data.columns = ['group', 'item_code', 'item', 'part', 'share_%', 'accounted_in_fao', 'avoidability']

# Optional: Convert data types as needed, for example
all_data['share_%'] = pd.to_numeric(all_data['share_%'], errors='coerce')

## Read in FAO or similar database
## The FOWCUS and FAO databases can readily be merged using the CPC code and FAO commodity classification
## For livestock, make sure to retrieve the number of animals slaughtered, instead of the tonnes of commodities produced

# Integrating animal live-weight average to calculate total production value in live-weight of livestock commodities
# Data can be retrieved from https://www.fao.org/dad-is/data/en/
# Merge live-weight data with the FAO-augmented FOWCUS database to have an average live-weight column

# Function to calculate part amounts for the FAO-augmented FOWCUS

def calculate_part_amounts(group):
    group['adjusted_share'] = group['share_%']
    accounted_parts = group[group['accounted_in_fao'] == 'yes']
    non_accounted_parts = group[group['accounted_in_fao'] == 'no']
    share_sum = accounted_parts['share_%'].sum()
    group.loc[group['accounted_in_fao'] == 'yes', 'adjusted_share'] = group['share_%'] / share_sum

    # Calculate part amounts
    group['part_amount'] = 0
    for idx, part in group.iterrows():
        if part['unit'] in ['Tonnes - live weight', 'tonnes']:
            if part['accounted_in_fao'] == 'yes':
                group.at[idx, 'part_amount'] = part['value'] * part['adjusted_share']
            elif part['accounted_in_fao'] == 'no':
                group.at[idx, 'part_amount'] = (part['value'] / (1-part['share_%'])) - part['value']
        elif part['unit'] == 'An':
            total_weight = part['live_weight'] * part['value']
            group.at[idx, 'part_amount'] = total_weight * part['adjusted_share']
        elif part['unit'] == '1000 An':
            total_weight = part['live_weight']*1000 * part['value']
            group.at[idx, 'part_amount'] = total_weight * part['adjusted_share']

    return group

# Apply the function to each group of items
df = all_data.groupby('item').apply(calculate_part_amounts)

